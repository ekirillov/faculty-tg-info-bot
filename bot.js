import { config } from "dotenv";
import mongoose from "mongoose";
import { Telegraf } from "telegraf";
import teachersController from "./src/controllers/teachersController.js";
import departmentsController from "./src/controllers/departmentsController.js";
config();

const {
  getAllTeachersByDepartmentList,
  getAllTeachersGroupedByDepartment,
  getTeachersInfo,
  getTeacherById,
  getTeacherByIdWithDepartment,
} = teachersController();

const { getAll: getAllDepartments, create: createDepartment } =
  departmentsController();

const PRINT_TEACHER_INFO = "printTeacherInfo";

mongoose.connect(process.env.CONNECTION_STRING, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});
const db = mongoose.connection;

const bot = new Telegraf(process.env.BOT_TOKEN);

const DEPARTMENT_EMOJI = "üè´";

const TEACHERS = "üßë‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏";
const DEPARTMENTS = "üè¨ –ö–∞—Ñ–µ–¥—Ä—ã";
const CONTACTS = "üìá –ö–æ–Ω—Ç–∞–∫—Ç—ã";
const FIELDS_OF_STUDY = "‚ÑπÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏";
const DOCUMENTS = "üìù –î–æ–∫—É–º–µ–Ω—Ç—ã";

bot.start((ctx) =>
  ctx.reply(
    "<b>–§–∞–∫—É–ª—å—Ç–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b> –≥–æ—Ç–æ–≤–∏—Ç –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –æ–±—â–µ—Å—Ç–≤–æ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏, –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞.\n\n" +
      "<b>–°—Ñ–µ—Ä–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤</b> ‚Äì —Å–∞–º–∞—è —à–∏—Ä–æ–∫–∞—è, –æ—Ç —Ä–∞–±–æ—Ç—ã –≤ –æ—Ä–≥–∞–Ω–∞—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –±–∏–∑–Ω–µ—Å-—Å—Ç—Ä—É–∫—Ç—É—Ä, –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø–ª–æ—â–∞–¥–æ–∫ –¥–æ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–ª—ã–º (–≤ —Ç–æ–º —á–∏—Å–ª–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –±–∏–∑–Ω–µ—Å–æ–º).\n\n" +
      "–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ –∑–Ω–∞–Ω–∏—è –ø–æ–∑–≤–æ–ª—è—é—Ç –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–æ–º —É—á–µ—Ç–µ –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –ø–æ–ª–∏—Ç–∏–∫–µ, –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ-–ø—Ä–∞–≤–æ–≤–æ–π –±–∞–∑–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞–µ–ª—å—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –º–Ω–æ–≥–∏—Ö –¥—Ä—É–≥–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö.",
    {
      parse_mode: "HTML",
      reply_markup: {
        keyboard: [
          [{ text: TEACHERS }, { text: DEPARTMENTS }],
          [{ text: FIELDS_OF_STUDY }, { text: CONTACTS }],
          [{ text: DOCUMENTS }],
        ],
        resize_keyboard: true,
      },
    }
  )
);

const replyWithTeachersInlineKeyboard = async (ctx) => {
  const teachersGroupedByDepartment = await getAllTeachersGroupedByDepartment();

  ctx.reply("–°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π", {
    reply_markup: {
      inline_keyboard: generateTeachersInlineKeyboard(
        teachersGroupedByDepartment
      ),
    },
  });
};

const replyWithDepartmentsInlineKeyboard = (ctx) => {
  ctx.reply("–°–ø–∏—Å–æ–∫ –∫–∞—Ñ–µ–¥—Ä", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–ö–∞—Ñ–µ–¥—Ä–∞ 1", callback_data: "1" }],
        [{ text: "–ö–∞—Ñ–µ–¥—Ä–∞ 2", callback_data: "2" }],
        [{ text: "–ö–∞—Ñ–µ–¥—Ä–∞ 3", callback_data: "3" }],
      ],
    },
  });
};

bot.on("text", async (ctx, next) => {
  const { text } = ctx.message;

  switch (text) {
    case TEACHERS:
      await replyWithTeachersInlineKeyboard(ctx);
      break;
    case DEPARTMENTS:
      await replyWithDepartmentsInlineKeyboard(ctx);
      break;
    case CONTACTS:
      ctx.reply(
        "<b>‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω –æ—á–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è</b>: (4812) 700-270\n\n" +
          "<b>‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–æ—á–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è</b>: (4812) 700-271\n\n" +
          "üì© dek-upr@smolgu.ru",
        {
          parse_mode: "HTML",
        }
      );
      break;
    case FIELDS_OF_STUDY:
      ctx.reply("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏", {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: `${DEPARTMENT_EMOJI} –ö–∞—Ñ–µ–¥—Ä–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏`,
                callback_data: "1",
              },
            ],
            [
              { text: " ", callback_data: "2" },
              { text: "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç", callback_data: "2" },
              { text: " ", callback_data: "2" },
            ],
            [
              { text: "–û—á–Ω–æ–µ", callback_data: "3" },
              { text: "–ó–∞–æ—á–Ω–æ–µ", callback_data: "3" },
            ],
            [
              { text: "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1", callback_data: "3" },
              { text: "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2", callback_data: "3" },
            ],
            [
              { text: "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1", callback_data: "3" },
              { text: "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2", callback_data: "3" },
            ],
            [
              { text: " ", callback_data: "2" },
              { text: "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞", callback_data: "2" },
              { text: " ", callback_data: "2" },
            ],
            [
              { text: "–û—á–Ω–æ–µ", callback_data: "3" },
              { text: "–ó–∞–æ—á–Ω–æ–µ", callback_data: "3" },
            ],
            [
              { text: "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1", callback_data: "3" },
              { text: "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2", callback_data: "3" },
            ],
            [
              { text: "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1", callback_data: "3" },
              { text: "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2", callback_data: "3" },
            ],
            [
              {
                text: ` `,
                callback_data: "1",
              },
            ],
            [
              {
                text: `${DEPARTMENT_EMOJI} –ö–∞—Ñ–µ–¥—Ä–∞ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞`,
                callback_data: "1",
              },
            ],
            [
              { text: " ", callback_data: "2" },
              { text: "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç", callback_data: "2" },
              { text: " ", callback_data: "2" },
            ],
            [
              { text: "–û—á–Ω–æ–µ", callback_data: "3" },
              { text: "–ó–∞–æ—á–Ω–æ–µ", callback_data: "3" },
            ],
            [
              { text: "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1", callback_data: "3" },
              { text: "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2", callback_data: "3" },
            ],
            [
              { text: "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1", callback_data: "3" },
              { text: "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2", callback_data: "3" },
            ],
            [
              { text: " ", callback_data: "2" },
              { text: "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞", callback_data: "2" },
              { text: " ", callback_data: "2" },
            ],
            [
              { text: "–û—á–Ω–æ–µ", callback_data: "3" },
              { text: "–ó–∞–æ—á–Ω–æ–µ", callback_data: "3" },
            ],
            [
              { text: "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1", callback_data: "3" },
              { text: "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2", callback_data: "3" },
            ],
            [
              { text: "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1", callback_data: "3" },
              { text: "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2", callback_data: "3" },
            ],
            [
              {
                text: ` `,
                callback_data: "1",
              },
            ],
            [
              {
                text: `${DEPARTMENT_EMOJI} –ö–∞—Ñ–µ–¥—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π`,
                callback_data: "1",
              },
            ],
            [
              { text: " ", callback_data: "2" },
              { text: "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç", callback_data: "2" },
              { text: " ", callback_data: "2" },
            ],
            [
              { text: "–û—á–Ω–æ–µ", callback_data: "3" },
              { text: "–ó–∞–æ—á–Ω–æ–µ", callback_data: "3" },
            ],
            [
              { text: "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1", callback_data: "3" },
              { text: "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2", callback_data: "3" },
            ],
            [
              { text: "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1", callback_data: "3" },
              { text: "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2", callback_data: "3" },
            ],
            [
              { text: " ", callback_data: "2" },
              { text: "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞", callback_data: "2" },
              { text: " ", callback_data: "2" },
            ],
            [
              { text: "–û—á–Ω–æ–µ", callback_data: "3" },
              { text: "–ó–∞–æ—á–Ω–æ–µ", callback_data: "3" },
            ],
            [
              { text: "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1", callback_data: "3" },
              { text: "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2", callback_data: "3" },
            ],
            [
              { text: "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1", callback_data: "3" },
              { text: "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2", callback_data: "3" },
            ],
          ],
        },
      });
      break;
    default:
      break;
  }
  next();
});

bot.help((ctx) => ctx.reply("..."));

const generateTeachersInlineKeyboard = (teachersByDepartment) => {
  const getTeacherButtons = (teachers) => {
    const rows = [];

    const getButtonDefinition = ({
      name,
      gender,
      surname,
      patronymic,
      _id: id,
    }) => ({
      text: `${gender === "m" ? "üë®" : "üë©"} ${surname} ${name[0]}. ${
        patronymic[0]
      }`,
      callback_data: `${PRINT_TEACHER_INFO}_${id}`,
    });

    const buttonRowsCount = Math.ceil(teachers.length / 2);
    for (let i = 0; i < buttonRowsCount; i++) {
      const leftButtonDataIndex = 2 * i;
      const rightButtonDataIndex = 2 * i + 1;

      const row = [
        getButtonDefinition(teachers[leftButtonDataIndex]),
        teachers[rightButtonDataIndex]
          ? getButtonDefinition(teachers[rightButtonDataIndex])
          : {
              text: " ",
              callback_data: "-",
            },
      ];
      rows.push(row);
    }

    return rows;
  };

  return Object.entries(teachersByDepartment).reduce(
    (res, [departmentName, teachers]) => [
      ...res,
      [
        {
          text: `${DEPARTMENT_EMOJI} ${departmentName}`,
          callback_data: "do-nothing",
        },
      ],
      ...getTeacherButtons(teachers),
    ],
    []
  );
};

bot.on("callback_query", async (ctx) => {
  const callbackData = ctx.update.callback_query.data;
  if (callbackData.includes(PRINT_TEACHER_INFO)) {
    const teacherId = callbackData.split("_")[1];
    const teacher = await getTeacherByIdWithDepartment(teacherId);

    await ctx.replyWithPhoto(
      {
        url: teacher.img,
      },
      {
        caption:
          `<b>${teacher.surname} ${teacher.name} ${teacher.patronymic}</b>\n` +
          `${teacher.department.name}\n` +
          `–ù–∞—É—á–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å: ${teacher.scienceDegrees}\n` +
          `–î–æ–ª–∂–Ω–æ—Å—Ç—å: ${teacher.positions}`,
        parse_mode: "html",
      }
    );
  }
  await ctx.answerCbQuery();
});

bot.launch();
